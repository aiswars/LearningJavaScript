pgming with mosh
------------------------
data type var was only ealier till ES6 version
now let,const and var available

Node js ia a c++ program with V8 engine of google chrome JS engine
Node js is a javascript runtime bulit on Chrome's V8 script engine.

executing on VSCode editor
in VSCOde > new file - index.html > type ! press tab - to get a default html
open extensions tab >> search for live server - Ritwick Dey dev local server>> install live server - to serve the webapplicatins--  
then restart vscode >> explorer tab then right click index.html - open with live server to open the default browser/chrome pointed to the adrress- from thats where the webapplication is served from
html is the contents on the web (webcontents) and js is the behavior for this webelements like- what to do when hover on the webelement, hiding oe showing the elements- how a webpage should behave

its better to practice putting <script> tag should be at the bottom of the html file in <body> - 2 reasons
1. browser parses file from top to the bottom so if the js is in top <head> section then lot of js code might be there so browser might be busy parsing and executing this js code 
    and it wont be able to render the content of the page this will create a bad user experience - user might see a blank space or white space while the browser is busy parsing and executing the 
    js code
2. almost always the code that is inbetween script elements needs to talk  to the elements on this webpage. like hiding or showing the elements so by adding the script at bottom
    it is ensured that the elements are rendered by beowser. there are exception for this rule like in some cases the jscode has to be in the head section, but that are exceptions.
so js can be written in html file in <script> tag - inline js
but for a huge application this is not the right way - the js code has to be in separate files from the html page. combine these js files as bundle and there are ways to serve to the application
to separate the js from html file - create a file with extension-  .js >> index.js   >>>  
and then in html file -index.html put this index.js file has to be refrenced to the index.html file - in <script attribute src and set to index.js need to refrence that file to here
 <script src= "index.js">

executing on node js
go the folder location open command prompt and type node index.js -- the ouptut should be heelo world as in index.js file
node js--node js is program that includes google's v8 javascript engine - a runtime environment to execute js code

executing on cmd prompt >> go the folder location open cmd prompt > type node index.js - output should be hello world same as in the index.js file

in VSCode there is an integrated terminal>> open that - VSCOde>View>Integrated terminal - will open with folder pointing to the current working folder- the same folder where the index.js and index.html files are present
or open new terminal- select the workong folder- in terminal type node index.js 

==================================================================================================================================



Data type
Data type var was only ealier till ES6 version
now let,const and var available

Node js ia a c++ program with V8 engine of google chrome JS engine
Node js is a javascript runtime bulit on Chrome's V8 script engine.

by default the value of variables in js is undefined 
let name;
console.log(name);
can initialize the value for variables >> 
let name = 'ice';
console.log(name);

create a new .js file and give its reference in html file in <script src=
outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde

let datatype - for variables
rules for the names 
canot be a reserved keywords - like if, while
should be meaningful
cannot be number
cannot contain space or hyphen (-)
should be in camelCase
are case sensitive - let firstName and let FirstName are different
can declare multiple variables in same line - let firstName = 'ice' , lastName;

const for declaring constants
const InterestRate = 0.3;
const has to be initialized


Primitive data types/values types
-------------------------------------

String - let name = 'ice'; //string literal - the type is String
Number - let age = 25; //number literal - the type is number
boolean - let isClear = false; //boolean literal - the type is boolean
undefined - let name; //if no value assigned by default the value is set as undefined. can set explicitly >> let name1 = undefined; - the type and value is undefined
            let name1 = undefined; >> so here the value is undefined,  the type is also undefined - typeof name1 >> undefined 
null - to clear the value of a varibale  - let selectedColor = null //string literal >> typeof selectedColor is object -  the type is object

symbol - ?? in es6

typeof - to use to dtermine the the type of the variable - typeof name >> String,  typeof selectedColor is object
 typeof name1 >> undefined 
 on console type typeof name1
outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde
console.log( typeof name1); //undefined
console.log( typeof selectedColor); //object


dynamic language type of the variable can be changed at runtime. can be is determined at runtime
but if name = 1 is given then typedef name will give as number.
Java is statci language = String name ='ice' cannot be chnaged to 1 - will give error

outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde



Reference tYpes
------------------

object
Array
Function

object - like a real world object.
let or const can be used.
let person = {};  //object literal -{}
let person =  {}; - between {} one or more key values can be paired.
let person = {
    name : 'ice' ,
    age : 25
    };

//object- refernce tye
let person = {
    name : 'ice',
    age : 25
    };
    console.log(person);

    //object - Dot Notation - default choice - as it is concise and short
    person.name = 'kia';
    console.log(person.name);
    console.log(person.age);

    //object -Bracket Notation - Square Bracket
    person['kia'] = 'mia';
    console.log(person.name);

    //object -bracket notation is used when target selection is only at runtime- like the selection or input is known only at runtime which will be selected by the user- not know which has to be selcted earlier before runtime
    let selection = 'name';
    person[selection] = 'sia';
    console.log(person.name);
    
    
    //object -bracket notation is used when target selection is only at runtime-
    like the selection or input is known only at runtime which will be selected by the user- not know which has to be selcted earlier before runtime
  outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde



//Array- refernce type

//let selectedColors = []; //[] - array literal
let selectedColors = ['red', 'blue']; 
console.log(selectedColors[0]); //red
selectedColors[2]='green';
console.log(selectedColors);  //(3)Â ['red', 'blue', 'green']
console.log(selectedColors.length); //3
on console>> typeof selectedColors >> object

Array is a datastructure to store a list of items like items in a cart or a list of colors
array length is dynamic and the type is also dynamic- unlike other pgmimg languages js can takes any type of data in an array
typeof array>> object - typeof arrayname - array is an object in JS
outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde



Functions - reference type
Functions are the fundamental blocks in JS. functions are a set of statements to perform a task. or clculating a value
function is the keyword
function functionname() {
// body of the function
}

//function- refernce type //perform a task.
function hello(){
console.log("Hello hello");
}   // function declaration

hello(); //function calling

//function with parameters- refernce type
function greet(namefun) {    //function declaration with parameters -varibalename namefun in the function is the parameter of the function
    console.log("Hello hello " + namefun);   //the variable namefun will work only inside this function
    }   // function declaration
greet('ice'); //function calling- passing arguments - the value -ice >>   values passing tot he function is the argument of the function
 console.log("Hello hello " + namefun);  >> Hello hello ice
outputs on console- js code in js file which is referenced to an html file tha is opened with live server in VSCOde
can change the input >> greet('kia'); Hello hello kia
greet('ice'); //function calling- passing arguments
greet('kia'); //  console.log("Hello hello " + namefun); - Hello hello kia  

//function with multiple parameters- refernce type
function greet(namefun, namefun2){    //function with 2 parameters
    console.log("Hello hello " + namefun+ " " +namefun2);    // Hello hello mia sia  
}  // function declaration
    
greet('mia','sia'); //function calling- passing 2 arguments
 
 function calculates and returns a value
 //function returning  a value
//function  - calculating a value
function square(number){
   return number * number;   //function returning  a value
}
square(2);   //just calling the function - the return value is not used 
let squareVal = square(3); //calling the function and stored te returned value to a variable
console.log(squareVal); //9 displaying the stored returned value
console.log(square(3)); //9 calling the function and displaying the returned value directly

parameters and arguments of the function >>>> 
 //function declaration with parameters - varibalename in the function at the time of function declaration is the parameter of the function
 //function calling- passing arguments - and the values passing to the function at the time of finction calling is the argument of the function

console.log() is also a function





YT Traversy Media

using back ticks - `` >>//back tick on left side with ~ below Esc key
template Strings from ES6 or es2015
conole.log(`this is javascript` ); //back tick on left side with ~ below Esc key
const subject = 'javascript'
conole.log(`this is ${subject}` ); //instead of using + to concatenate use ${} - no + no ''


Typescript is superset of javascript - javascript with some added features like static typing -data type declaration- the data type has to be defined while declaration
const name = 'ice'; //in js
const name: string =  'ice'; //in ts



//using back ticks  ``  template Strings from ES6 or es2015
const subject = 'javascript'
console.log(`this is ${subject}` ); 
const s1 = `this is ${subject}` ;
console.log(s1);

//Strings
const s = 'Hello World!'
console.log(s);
console.log(s.toUpperCase);
console.log(s.length); //12
console.log(s.substring(0,5)); //start index from 0 and  endindex from 1 to 5
s.substring(0,5); //hello
s.split('');
const s2 = 'technology, computers, code';
console.log(s2.indexOf('code'));
console.log(s2.split(', ')); //split s2 by , space - 

//aarays are varibales that hold multiple values -JS allows to store data of any type
const numbers = new Array(1,2,3,4,5);
console.log(numbers);

const fruits = ['apples, oranges, pears'];
console.log(fruits);
console.log(fruits[2]); //pears - output -undefined?? value at that index
//cant re assign the array>> fruits = []; //will give error
fruits[3] = 'grapes';
console.log(fruits);

console.log('push to add at the end');
fruits.push('mangoes'); // to add at the end
console.log(fruits);

console.log('unshift to add in beginning');
fruits.unshift('strawberries'); // to add in beginning
console.log(fruits);

console.log('pop to remove last item');
fruits.pop(); // to remove last item
console.log(fruits);

console.log(Array.isArray(fruits)); //true
console.log(Array.isArray('java')); // false
console.log(fruits.indexOf('oranges')); // index of oranges
console.log(fruits);



console.log(fruits.concat(numbers));
console.log(fruits.indexOf('oranges')); 

//object literl - object and arrays inside an object

const person = {
    firstName : 'mia',
    age : 25,
    hobbies: ['music', 'movies', 'sports'],  //array
    address: {                     //object
        street : '10main street',
        city: 'Boston',
        state: 'MA'
    }
}
console.log(person);
console.log(person.name,person.age);
console.log(person.hobbies[1]);
console.log(person.address.city);

//destructuring - recent updates- getting the variables inside the object literal
const {firstName, age} = person; //not assigning - pulling the variables form thhe object persob
console.log(firstName); //mia

//const {firstName, age, address : {city}} = person;
//console.log(city); //boston

//add properties
person.email = 'abc@gmail.com';

//object with arryas
const todos = [
    {
        id:1,
        text: 'take a break',
        isCOmpleted : 'true'
    },
    {
        id:1,
        text: 'dr appointment',
        isCOmpleted : 'true'
    },
    {
         id:3,
        text: 'buy groceries',
        isCOmpleted : 'false'
    }
];

console.log(todos);
console.log(todos[1].text);

//json - freeformatter.com
console.log('todoJSON');
const todoJSON = JSON.stringify(todos);
console.log(todoJSON);
//JSON stands for "JavaScript Object Notation" 
/* [{"id":1,"text":"take a break","isCOmpleted":"true"},{"id":1,"text":"dr appointment","isCOmpleted":"true"},{"id":3,"text":"buy groceries","isCOmpleted":"false"}]
no singl quotes in JSON format
 */


